pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "jiteshkumardeloitte/ci-cd"
        SONARQUBE_URL = "http://10.0.1.213:9000"  // SonarQube server URL
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Test') {
            steps {
                sh '''
                    # Use Maven through Docker
                    docker run --rm -v "$PWD/spring-boot-app":/app -w /app maven:3.8.6-openjdk-11-slim mvn clean package
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis with the specified server URL
                    sh '''
                        docker run --rm -v "$PWD/spring-boot-app":/app -w /app maven:3.8.6-openjdk-11-slim mvn sonar:sonar \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${sonarqube}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('spring-boot-app') {
                    script {
                        def imageTag = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
                        sh "docker build -t ${imageTag} ."
                        withCredentials([usernamePassword(credentialsId: 'docker-cred', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                            sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                            sh "docker push ${imageTag}"
                        }
                    }
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            environment {
                GIT_REPO_NAME = "ci-cd-assignment3"
                GIT_USER_NAME = "jkumar10Deloitte"
            }
            steps {
                script {
                    // Update image tag in deployment manifest
                    sh "sed -i 's|jiteshkumardeloitte/ci-cd:replaceImageTag|jiteshkumardeloitte/ci-cd:${BUILD_NUMBER}|g' spring-boot-app-manifests/deployment.yml"

                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "jkumar10@deloitte.com"
                            git config user.name "jkumar10Deloitte"
                            git checkout main
                            git add -A
                            git commit -m "Update image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'CI pipeline completed successfully! ArgoCD will handle the deployment.'
        }
        failure {
            echo 'CI pipeline failed!'
        }
    }
}
