pipeline {
  agent {
    docker {
      image 'maven:3.8.6-openjdk-11-slim'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
 
  environment {
    DOCKER_IMAGE = "jiteshkumardeloitte/ci-cd"
    SONAR_URL = "http://your-sonarqube-server:9000"
  }
 
  stages {
    stage('Build and Test') {
      steps {
        dir('spring-boot-app') {
          sh 'mvn clean package'
        }
      }
    }
   
    stage('SonarQube Analysis') {
      steps {
        dir('spring-boot-app') {
          withSonarQubeEnv('SonarQube') {
            sh 'mvn sonar:sonar -Dsonar.projectKey=spring-boot-app'
          }
        }
      }
    }
   
    stage('Quality Gate') {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
   
    stage('Build and Push Docker Image') {
      steps {
        dir('spring-boot-app') {
          script {
            def imageTag = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
            sh "docker build -t ${imageTag} ."
            withCredentials([string(credentialsId: 'docker-hub', variable: 'DOCKER_HUB_PWD')]) {
              sh 'echo $DOCKER_HUB_PWD | docker login -u jiteshkumardeloitte --password-stdin'
              sh "docker push ${imageTag}"
            }
          }
        }
      }
    }
   
    stage('Update Kubernetes Manifests') {
      steps {
        script {
          // Clone/checkout the repository if needed
          sh "sed -i 's|${DOCKER_IMAGE}:[^ ]*|${DOCKER_IMAGE}:${BUILD_NUMBER}|g' spring-boot-app-manifests/deployment.yml"
         
          withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
              git config user.email "jkumar10@deloitte.com"
              git config user.name "jkumar10Deloitte"
              git add spring-boot-app-manifests/deployment.yml
              git commit -m "Update image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/jkumar10Deloitte/ci-cd-assignment3.git HEAD:main
            '''
          }
        }
      }
    }
   
    stage('Deploy to EKS') {
      steps {
        withAWS(credentials: 'aws-credentials', region: 'us-east-1') {
          withKubeConfig([credentialsId: 'eks-kubeconfig']) {
            sh 'kubectl apply -f spring-boot-app-manifests/'
            sh 'kubectl rollout status deployment/spring-boot-app -n default'
          }
        }
      }
    }
  }
 
  post {
    always {
      cleanWs()
    }
    success {
      echo 'Deployment completed successfully!'
    }
    failure {
      echo 'Deployment failed!'
    }
  }
}
