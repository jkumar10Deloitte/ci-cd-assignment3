pipeline {
  agent {
    docker {
      image 'maven:3.8.6-openjdk-11-slim'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
 
  environment {
    DOCKER_IMAGE = "jiteshkumardeloitte/ci-cd:${BUILD_NUMBER}"
    SONAR_URL = "http://172.31.33.45:9000"
  }
 
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
   
    stage('Build and Test') {
      steps {
        sh 'mvn clean package'
      }
      post {
        success {
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
          junit 'target/surefire-reports/*.xml'
        }
      }
    }
   
    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
   
    stage('Build and Push Docker Image') {
      steps {
        script {
          withCredentials([string(credentialsId: 'docker-hub', variable: 'DOCKER_HUB_PWD')]) {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            sh 'echo $DOCKER_HUB_PWD | docker login -u your-dockerhub-username --password-stdin'
            sh 'docker push ${DOCKER_IMAGE}'
          }
        }
      }
    }
   
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "ci-cd-assignment3"
        GIT_USER_NAME = "jkumar10Deloitte"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config --global user.email "jkumar10@deloitte.com"
            git config --global user.name "${GIT_USER_NAME}"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
            git add spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
   
    stage('Deploy to Development') {
      steps {
        script {
          withKubeConfig([credentialsId: 'kubeconfig']) {
            sh 'kubectl apply -f spring-boot-app-manifests/deployment.yml'
            sh 'kubectl apply -f spring-boot-app-manifests/service.yml'
          }
        }
      }
    }
  }
 
  post {
    always {
      cleanWs()
    }
    success {
      echo 'Pipeline completed successfully!'
    }
    failure {
      echo 'Pipeline failed!'
    }
  }
}
